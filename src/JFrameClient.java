/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

/**
 *
 * @author jami
 */
public class JFrameClient extends javax.swing.JFrame {
    // public Test filechooserFrame;
     public String openFiledirName;
    // public boolean checkclientCreation=false;
     public boolean stopclient=true;
     public String filePathname;
    public  ClientClass clientclass;
    public boolean uploadStatus=false;
     
    /**
     * Creates new form JFrameClient
     */
    public JFrameClient() {
        initComponents();
        //filechooserFrame = new Test();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileUploadPanel = new javax.swing.JTabbedPane();
        clientConnectionPanel = new javax.swing.JPanel();
        connectRqst = new javax.swing.JButton();
        abortConnection = new javax.swing.JButton();
        serverIpAdd = new javax.swing.JTextField();
        studentId = new javax.swing.JTextField();
        serverPortNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientMessages = new javax.swing.JTextArea();
        filePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileUploadMsg = new javax.swing.JTextArea();
        fileUploaderButton = new javax.swing.JButton();
        FileDirectoryName = new javax.swing.JTextField();
        sendfile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Client");
        setResizable(false);

        connectRqst.setText("Connect");
        connectRqst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectRqstActionPerformed(evt);
            }
        });

        abortConnection.setText("AbortConnection");
        abortConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortConnectionActionPerformed(evt);
            }
        });

        serverIpAdd.setText("127.0.0.1");

        studentId.setText("1005050");

        serverPortNo.setText("666");
        serverPortNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPortNoActionPerformed(evt);
            }
        });

        jLabel3.setText("ServerPort");

        jLabel2.setText("ServerIp");

        jLabel1.setText("ClientId");

        clientMessages.setColumns(20);
        clientMessages.setRows(5);
        jScrollPane1.setViewportView(clientMessages);

        javax.swing.GroupLayout clientConnectionPanelLayout = new javax.swing.GroupLayout(clientConnectionPanel);
        clientConnectionPanel.setLayout(clientConnectionPanelLayout);
        clientConnectionPanelLayout.setHorizontalGroup(
            clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientConnectionPanelLayout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addGroup(clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientConnectionPanelLayout.createSequentialGroup()
                        .addGroup(clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(93, 93, 93)
                        .addGroup(clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(serverIpAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serverPortNo, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentId, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(clientConnectionPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addGroup(clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(abortConnection)
                            .addComponent(connectRqst))))
                .addGap(47, 47, 47))
        );
        clientConnectionPanelLayout.setVerticalGroup(
            clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientConnectionPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(clientConnectionPanelLayout.createSequentialGroup()
                        .addComponent(studentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(serverIpAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(serverPortNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(clientConnectionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(clientConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientConnectionPanelLayout.createSequentialGroup()
                        .addComponent(connectRqst)
                        .addGap(58, 58, 58)
                        .addComponent(abortConnection)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientConnectionPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))))
        );

        fileUploadPanel.addTab("ClientConnection", clientConnectionPanel);

        fileUploadMsg.setColumns(20);
        fileUploadMsg.setRows(5);
        jScrollPane2.setViewportView(fileUploadMsg);

        fileUploaderButton.setText("Upload");
        fileUploaderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileUploaderButtonActionPerformed(evt);
            }
        });

        FileDirectoryName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileDirectoryNameActionPerformed(evt);
            }
        });

        sendfile.setText("sendFile");
        sendfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filePanelLayout.createSequentialGroup()
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sendfile))
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addGap(80, 281, Short.MAX_VALUE)
                        .addComponent(fileUploaderButton)
                        .addGap(50, 50, 50)
                        .addComponent(FileDirectoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46))
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileUploaderButton)
                    .addComponent(FileDirectoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendfile))
                .addGap(65, 65, 65))
        );

        fileUploadPanel.addTab("File upload", filePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileUploadPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileUploadPanel)
        );

        setSize(new java.awt.Dimension(616, 438));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void serverPortNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPortNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverPortNoActionPerformed

    private void abortConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortConnectionActionPerformed
        // TODO add your handling code here:
        this.stopclient=false;
        try {
            this.clientCloseConnection();
        } catch (IOException ex) {
            Logger.getLogger(JFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abortConnectionActionPerformed

    private void connectRqstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectRqstActionPerformed
        // TODO add your handling code here:
        clientclass=new ClientClass(this,this.serverIpAdd.getText()
            ,Integer.parseInt(serverPortNo.getText()),Integer.parseInt(studentId.getText()));
        Thread clientThread=new Thread(clientclass);
        clientThread.start();
        //checkclientCreation=true;
        //this.serverIpAdd.setText(null);
        //this.serverPortNo.setText(null);
        //this.studentId.setText(null);
    }//GEN-LAST:event_connectRqstActionPerformed
    
    private void fileUploaderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileUploaderButtonActionPerformed
        // TODO add your handling code here:
        if(this.clientclass.boolConnected==true){
            JFileChooser fileChooser=new JFileChooser();
            fileChooser.setMultiSelectionEnabled(true);
            fileChooser.setCurrentDirectory(new File("C:\\Users\\jami1\\OneDrive\\Desktop\\SocketProgramming"));
            fileChooser.showOpenDialog(this);
            clientclass.fileAry=fileChooser.getSelectedFiles();
            for(int i=0;i<clientclass.fileAry.length;i++)
            {
                System.out.println("");   
                if(this.fileUploadMsg.getText()==null)fileUploadMsg.setText(clientclass.fileAry[i].getName());
                else 
                    fileUploadMsg.setText(fileUploadMsg.getText()+"\n"+clientclass.fileAry[i].getName());
            } 
        }
        else 
        {
            this.fileUploadMsg.setText("try again after connecting to the server ");
            System.out.println("try again after connecting to the server \n");
        }
    }//GEN-LAST:event_fileUploaderButtonActionPerformed

    private void FileDirectoryNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileDirectoryNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileDirectoryNameActionPerformed
    public FileSender fileSender;
    private void sendfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendfileActionPerformed
       /*  try {
             this.clientclass.sendFile(this.clientclass.myfile);
             System.out.println(this.clientclass.myfile);
             this.clientclass.fileSendStatus=true;
         } catch (IOException ex) {
             Logger.getLogger(JFrameClient.class.getName()).log(Level.SEVERE, null, ex);
         */
        Thread fileSenderThread=new Thread(new FileSender(this.clientclass,this.clientclass.fileAry));
        fileSenderThread.start();
    }//GEN-LAST:event_sendfileActionPerformed
       
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FileDirectoryName;
    private javax.swing.JButton abortConnection;
    private javax.swing.JPanel clientConnectionPanel;
    private javax.swing.JTextArea clientMessages;
    private javax.swing.JButton connectRqst;
    private javax.swing.JPanel filePanel;
    public javax.swing.JTextArea fileUploadMsg;
    private javax.swing.JTabbedPane fileUploadPanel;
    private javax.swing.JButton fileUploaderButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton sendfile;
    private javax.swing.JTextField serverIpAdd;
    private javax.swing.JTextField serverPortNo;
    public javax.swing.JTextField studentId;
    // End of variables declaration//GEN-END:variables
    public void SetFrameMessage(String s)
    {
        this.clientMessages.setText(s);
    }
    public String getFrameMessage()
    {
        return this.clientMessages.getText();
    }
    private void clientCloseConnection() throws IOException {
        this.clientclass.clientSocket.close();
        SetFrameMessage("connection is closed from"+this.clientclass.serverIp);
    }
    
    public JPanel getJframeFilePanel()
    {
        return this.filePanel;
    }
}
